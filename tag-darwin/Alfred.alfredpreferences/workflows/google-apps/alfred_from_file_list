#!/usr/bin/env ruby

require 'json'
require 'shellwords'

class MDMeta
  def initialize(formatter, *args)
    @md_keys = args
    @command = [
      'mdls',
      *args.flat_map {|a| ['-name', a]},
    ].join(' ')

    @regex = /=\s*"?(.*?)"?$/
    @formatter = formatter.to_proc
  end

  def to_proc
    Proc.new do |arg|
      file = arg.first
      lines = arg.last
      hash = Hash[
        lines.map.with_index do |l,i|
          match = @regex.match(l)
          next if match.nil?
          group = @regex.match(l)[1]
          next if group.nil?

          [
            @md_keys[i],
            group,
          ]
        end
      ]

      @formatter.call(hash, file)
    end
  end
end

class Formatter
  def to_proc
    Proc.new do |f,p|
      name = f['kMDItemFSName']
      {
        "uid"           => p,
        "type"          => "file",
        "title"         => name,
        "match"         => name.split(/\W/).join(' '),
        "subtitle"      => p.gsub(Dir.home, '~'),
        "arg"           => p,
        "autocomplete"  => name,
        "icon" => {
          "type"        => "fileicon",
          "path"        => p,
        }
      }
    end
  end
end

formatter = Formatter.new

md_meta_items = [
  'kMDItemFSContentChangeDate',
  'kMDItemFSName',
]

md_meta_items_args = md_meta_items.flat_map {|a| ['-name', a]}

mdmeta = MDMeta.new(formatter, *md_meta_items)
files = ARGF.readlines.map(&:chomp)
out = `mdls #{(md_meta_items_args + files).shelljoin}`
lines = files.zip(out.lines.each_slice(md_meta_items.count))

files = {:items => lines.map(&mdmeta).compact}.to_json
puts files
